name: 'AKS - Build & Deploy CongressMemberAPI'

on:
  push:
    branches:
      # - 'main' TODO: uncomment once prod fully set up
      - 'dev'
    paths:
      # any time chart is updated, means app has been updated
      - 'charts/congressmember-api/**'
  workflow_dispatch:

env:
  GITHUB_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
  DOCKER_IMAGE: 'congressmemberapi'
  HELM_CHART: 'congressmember-api'
  HELM_VERSION: 'v3.11.1'
  KUBELOGIN_VERSION: 'v0.0.27'

jobs:
  build-and-deploy:
    environment: ${{ env.GITHUB_ENVIRONMENT }}
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout branch'
      uses: actions/checkout@v3

    - name: 'Environment variables'
      run: |
        echo "${{ toJson(env) }}"

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Login to Azure Container Registry'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: 'Build image and push to ACR'
      run: |
        # make sure environment variables are set for images
        export ASPNETCORE_ENVIRONMENT=${{ env.ASPNETCORE_ENVIRONMENT }}
        export ENVIRONMENT=${{ env.ASPNETCORE_ENVIRONMENT }}

        docker compose build ${{ env.DOCKER_IMAGE }}
        docker compose push ${{ env.DOCKER_IMAGE }}

    - name: 'Install Kubectl'
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: 'Install Kubelogin'
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: ${{ env.KUBELOGIN_VERSION }}

    - name: 'Install Helm'
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: 'Set Kubernetes context for AKS'
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
        cluster-name: ${{ env.AZURE_KUBERNETES_CLUSTER }}
        admin: 'false'
        use-kubelogin: 'true'

    - name: 'Deploy to AKS with Helm chart'
      run: |
        helm upgrade ${{ env.HELM_CHART }} charts/${{ env.HELM_CHART }} --install
